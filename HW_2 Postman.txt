HW_2 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200

pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. 	//Проверить, что в body приходит правильный string.

http://162.55.220.72:5005/user_info_3
1. Отправить запрос.		// 
2. Статус код 200			//
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.	  // 
let jsonData = pm.response.json();

4. Проверить, что name в ответе равно name s request (name вбить руками.)
	pm.test("name_check", function() {
    pm.expect(jsonData.name).to.eql("Sham");
});
5. Проверить, что age в ответе равно age s request (age вбить руками.)
	pm.test("age_check", function() {
    pm.expect(jsonData.age).to.eql("40");
});
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
	pm.test("salary_check", function() {
    pm.expect(jsonData.salary).to.eql(2000);
});
7. Спарсить request.		
	let req = pm.request.body.formdata.toObject()
	
8. Проверить, что name в ответе равно name s request (name забрать из request.)
	pm.test("name_check1", function () {
	pm.expect(jsonData.name).to.eql(req.name);
});
9. Проверить, что age в ответе равно age s request (age забрать из request.)
	pm.test("age_check1", function () {
	pm.expect(jsonData.age).to.eql(req.age);
});
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
	pm.test("salary_check1", function () {
	pm.expect(jsonData.salary).to.eql(+req.salary);
});
11. Вывести в консоль параметр family из response.
	let family = jsonData.family
	console.log(jsonData.family)
	
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

pm.test("u_salary_1_5_year_check", function () {
pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary * 4);
});

http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
	pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
3. Спарсить response body в json.
let jsonData = JSON.parse(responseBody);

4. Спарсить request.
let req = pm.request.url.query.all()

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name_check", function () {
pm.expect(jsonData.name).to.eql(req.name);
});
6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("age_check", function () {
pm.expect(jsonData.age).to.eql(req.age);
});
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("salary_check", function () {
pm.expect(jsonData.salary).to.eql(+req.salary);
});
8. Вывести в консоль параметр family из response.
	let family = jsonData.family
console.log(jsonData.family)

9. Проверить, что у параметра dog есть параметры name.
pm.test("Check parametr Dog.Name "), function () {
pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('name')}

10. Проверить, что у параметра dog есть параметры age.
pm.test("Check parametr Dog.age "), function () {
pm.expect(jsonData.family.pets.dog).to.haveOwnProperty('age')}

11. Проверить, что параметр name имеет значение Luky.
pm.test("Check parametr Dog.Name.Luki "), function () {
pm.expect(jsonData.family.pets.dog.name).to.haveOwnProperty('Luki')}

12. Проверить, что параметр age имеет значение 4.
pm.test("Check parametr Dog.age.4 "), function () {
pm.expect(jsonData.family.pets.dog.age).to.haveOwnProperty('4')}

http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

3. Спарсить response body в json.
let jsonData = JSON.parse(responseBody);

4. Спарсить request.
let req = pm.request.url.query.toObject()

5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("name_check", function () {
pm.expect(jsonData.name).to.eql(req.name);
});

6. Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("age_check", function () {
pm.expect(jsonData.age).to.eql(+req.age);
});

7. Вывести в консоль параметр salary из request.
console.log(req.salary)

8. Вывести в консоль параметр salary из response.
console.log(jsonData.salary)

9. Вывести в консоль 0-й элемент параметра salary из response.
console.log(jsonData.salary[0])

10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[1])

11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[2])

12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("salary_0_check", function () {
pm.expect(jsonData.salary[0]).to.eql(+req.salary);
});

13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
let jsonData_salary = Number (jsonData.salary[1]); 
pm.test("salary_1_check", function () {
pm.expect(jsonData_salary).to.eql(req.salary * 2 );
});

14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
let jsonData_salary2 = Number (jsonData.salary[2]); 
pm.test("salary_2_check", function () {
pm.expect(jsonData_salary2).to.eql(req.salary * 3 );
});

15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary

pm.environment.set("name", req.name); 
pm.environment.set("age", req.age); 
pm.environment.set("salary", req.salary); 

21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
let arr = {
    "age": 30,
    "name": "Ivan",
    "salary": [
        1000,
        "2000",
        "3000"
    ]
}
for (let i = 0; i < arr.salary.length; i++) { 
    console.log(arr.salary[i]);    
}